const TelegramBot = require('node-telegram-bot-api');
const User = require('./models/user');
const { scrapeChannel, processNews } = require('./services/scraper');
const { TELEGRAM_TOKEN } = require('./config');

const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async function sendProcessedNews(chatId, channelUsername) {
    const posts = await scrapeChannel(channelUsername);

    if (posts.length === 0) {
        console.log('No new posts today.');
        return;
    }

    const user = await User.findOne({ chatId });

    const [timestamp, requestCounter] = user.requestCounter;
    const [_availableTimestamp, availableRequests] = user.availableRequests;

    if (requestCounter >= availableRequests) {
        const amount = 50;

        await bot.sendInvoice(
            chatId,
            '–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É',
            `–ü–æ–ø–æ–≤–Ω—ñ—Ç—å –±–∞–ª–∞–Ω—Å ‚≠êÔ∏è –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è. –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ ${amount} –∑–∞–ø–∏—Ç—ñ–≤`,
            'pay',
            '',
            'XTR',
            [{ label: '–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É', amount }]
        );

        throw new Error('Request limit exceeded');
    }

    if (Date.now() - timestamp < 10000) {
        bot.sendMessage(chatId, `–ó–∞—á–µ–∫–∞–π—Ç–µ ${10 - Math.floor((Date.now() - timestamp) / 1000)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º.`);
        throw new Error('Too many requests');
    }

    const summary = await processNews(posts, { isCompact: user.isCompact });

    user.requestCounter = [Date.now(), requestCounter + 1];
    await user.save();

    bot.sendMessage(chatId, summary, { parse_mode: 'HTML' });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendUserChannels(chatId) {
    try {
        const user = await User.findOne({ chatId });
        const channelButtons = [];

        if (user && user.channels.length > 0) {
            user.channels.forEach(channel => {
                channelButtons.push([
                    {
                        text: `üëâ ${channel}`,
                        callback_data: `/scrape ${channel}`
                    }
                ]);
            });

            channelButtons.push([
                {
                    text: `${user.isCompact ? '‚úÖ' : '‚òëÔ∏è'} –ö–æ—Ä–æ—Ç–∫–æ`,
                    callback_data: '/compact'
                }
            ]);

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞–Ω–∞–ª—ã
            channelButtons.push([
                {
                    text: '+ –î–æ–¥–∞—Ç–∏',
                    callback_data: '/addchannel'
                },
                {
                    text: '‚ùå –í–∏–¥–∞–ª–∏—Ç–∏',
                    callback_data: '/deletechannel'
                },
            ]);
        } else {
            bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤.');
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "Add" —Å–æ —Å–º–∞–π–ª–∏–∫–æ–º
            channelButtons.push([{
                text: '+ –î–æ–¥–∞—Ç–∏',
                callback_data: '/addchannel'
            }]);
        }

        const options = {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: channelButtons
            }
        };

        const [_timestamp, requestCounter] = user.requestCounter;
        const [_availableTimestamp, availableRequests] = user.availableRequests;

        // console.log('Request counter:', requestCounter);
        // console.log('Available requests:', availableRequests);

        bot.sendMessage(chatId, `<b>‚≠êÔ∏è ${availableRequests - requestCounter}</b> | –í–∞—à—ñ –∫–∞–Ω–∞–ª–∏:`, options);
    } catch (error) {
        console.error(error);
        bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª—ñ–≤.');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const { username, first_name: firstName, last_name: lastName } = msg.from;

    try {
        const user = new User({ chatId, username, firstName, lastName });
        await user.save();

        bot.sendMessage(chatId, '–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç, —è–∫–∏–π –∑–±–∏—Ä–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ—Å—Ç–∏ –∑ –ø—É–±–ª—ñ—á–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤ —ñ –æ–±—Ä–æ–±–ª—è—î —ó—Ö –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é OpenAI. –©–æ–± –ø–æ—á–∞—Ç–∏, –¥–æ–¥–∞–π—Ç–µ –∫–∞–Ω–∞–ª–∏, —è–∫—ñ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏.');
    } catch (error) {
        if (error.code === 11000) {
            console.log('User already exists');
        } else {
            console.error('Error saving user:', error);
        }
    } finally {
        await sendUserChannels(chatId);
    }
});

bot.onText(/\/scrape (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const channelUsername = match[1];

    try {
        await sendProcessedNews(chatId, channelUsername);
    } catch (error) {
        console.error(error);
        bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –Ω–æ–≤–∏–Ω.');
    } finally {
        await sendUserChannels(chatId);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async (callbackQuery) => {
    const msg = callbackQuery.message;
    const command = callbackQuery.data;

    if (command.startsWith('/scrape ')) {
        const channelUsername = command.split(' ')[1];

        bot.sendMessage(msg.chat.id, '–û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏–Ω...');

        try {
            await sendProcessedNews(msg.chat.id, channelUsername);
            await sendUserChannels(msg.chat.id);
        } catch (error) {
            console.error(error);
            bot.sendMessage(msg.chat.id, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –Ω–æ–≤–∏–Ω.');
        }
    } else if (command === '/deletechannel') {
        try {
            const user = await User.findOne({ chatId: msg.chat.id });
            if (user && user.channels.length > 0) {
                const deleteButtons = user.channels.map(channel => ([
                    {
                        text: channel,
                        callback_data: `/confirmdelete ${channel}`
                    }
                ]));

                const options = {
                    reply_markup: {
                        inline_keyboard: deleteButtons
                    }
                };

                bot.sendMessage(msg.chat.id, '–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:', options);
            } else {
                bot.sendMessage(msg.chat.id, '–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤.');
            }
        } catch (error) {
            console.error(error);
            bot.sendMessage(msg.chat.id, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª—ñ–≤.');
        }
    } else if (command.startsWith('/confirmdelete ')) {
        const channelUsername = command.split(' ')[1];
        try {
            const user = await User.findOne({ chatId: msg.chat.id });
            if (user) {
                user.channels = user.channels.filter(channel => channel !== channelUsername);
                await user.save();
                bot.sendMessage(msg.chat.id, `–ö–∞–Ω–∞–ª ${channelUsername} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π.`);
            } else {
                bot.sendMessage(msg.chat.id, '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
            }
        } catch (error) {
            console.error(error);
            bot.sendMessage(msg.chat.id, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–∞–Ω–∞–ª—É.');
        } finally {
            await sendUserChannels(msg.chat.id);
        }
    } else if (command === '/addchannel') {
        bot.sendMessage(msg.chat.id, '–í–≤–µ–¥—ñ—Ç—å username –∫–∞–Ω–∞–ª—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: @telegram, telegram) –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: https://t.me/telegram)');

        bot.once('message', async (responseMsg) => {
            const channelUsername = responseMsg.text.includes('http')
                ? responseMsg.text.split('/').pop()
                : responseMsg.text.replace('@', '');
            const chatId = responseMsg.chat.id;

            try {
                const user = await User.findOne({ chatId });
                if (user) {
                    if (!user.channels.includes(channelUsername)) {
                        user.channels.push(channelUsername);
                        await user.save();
                        bot.sendMessage(chatId, `–ö–∞–Ω–∞–ª ${channelUsername} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π.`);
                    } else {
                        bot.sendMessage(chatId, `–ö–∞–Ω–∞–ª ${channelUsername} –≤–∂–µ –¥–æ–¥–∞–Ω–∏–π.`);
                    }
                } else {
                    bot.sendMessage(chatId, '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
                }
            } catch (error) {
                console.error(error);
                bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–∞–Ω–∞–ª—É.');
            } finally {
                await sendUserChannels(chatId);
            }
        });
    } else if (command === '/compact') {
        try {
            const user = await User.findOne({ chatId: msg.chat.id });

            user.isCompact = !user.isCompact;
            await user.save();

            bot.sendMessage(msg.chat.id, `–†–µ–∂–∏–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—ñ ${user.isCompact ? '—É–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–≤–∏–º–∫–Ω–µ–Ω–æ'}.`);
        } catch (error) {
            console.error(error);
            bot.sendMessage(msg.chat.id, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–µ–∂–∏–º—É –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—ñ.');
        } finally {
            await sendUserChannels(msg.chat.id);
        }
    }
});

bot.on("pre_checkout_query", async (ctx) => {
    try {
        await bot.answerPreCheckoutQuery(ctx.id, true);
    } catch (error) {
        console.error("answerPreCheckoutQuery failed");
    }
});

bot.on("successful_payment", async (ctx) => {
    if (!ctx?.successful_payment || !ctx?.from || !ctx?.chat) {
        return;
    }

    try {
        const user = await User.findOne({ chatId: ctx.chat.id });

        if (!user) {
            throw new Error("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        const [_availableTimestamp, availableRequests] = user.availableRequests;

        user.availableRequests = [Date.now(), availableRequests + ctx.successful_payment.total_amount];
        user.payments.push(ctx);

        await user.save();

        bot.sendMessage(ctx.chat.id, "–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–≤–Ω–µ–Ω–æ. –î—è–∫—É—î–º–æ –∑–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É!");
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –æ–ø–ª–∞—á–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
    } finally {
        await sendUserChannels(ctx.chat.id);
    }
});

module.exports = bot;
