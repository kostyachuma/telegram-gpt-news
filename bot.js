const TelegramBot = require('node-telegram-bot-api');
const User = require('./models/user');
const { scrapeChannel, processNews } = require('./services/scraper');
const { TELEGRAM_TOKEN } = require('./config');

const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });

// –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
function handleError(chatId, message, error) {
    console.error(message, error);
    bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.');
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function findOrCreateUser(chatId, userData = {}) {
    try {
        let user = await User.findOne({ chatId });
        if (!user) {
            user = new User({ chatId, ...userData });
            await user.save();
        }
        return user;
    } catch (error) {
        handleError(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
        return null;
    }
}

// –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è handleStartCommand
async function handleStartCommand(msg) {
    const { chat: { id: chatId }, from: { username, first_name: firstName, last_name: lastName } } = msg;
    const user = await findOrCreateUser(chatId, { username, firstName, lastName });
    if (user) {
        bot.sendMessage(chatId, '–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç, —è–∫–∏–π –∑–±–∏—Ä–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ—Å—Ç–∏ –∑ –ø—É–±–ª—ñ—á–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤ —ñ –æ–±—Ä–æ–±–ª—è—î —ó—Ö –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é OpenAI. –©–æ–± –ø–æ—á–∞—Ç–∏, –¥–æ–¥–∞–π—Ç–µ –∫–∞–Ω–∞–ª–∏, —è–∫—ñ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏.');
        await sendUserChannels(chatId);
    }
}

// –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è handleForwardedMessage
async function handleForwardedMessage(msg) {
    if (!msg.forward_from_chat) return;

    const channelUsername = msg.forward_from_chat.username || msg.forward_from_chat.id;
    const chatId = msg.chat.id;
    const user = await findOrCreateUser(chatId);

    if (!user) return;

    if (!user.channels.includes(channelUsername)) {
        user.channels.push(channelUsername);
        await user.save();
        bot.sendMessage(chatId, `–ö–∞–Ω–∞–ª ${channelUsername} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π.`);
    } else {
        bot.sendMessage(chatId, `–ö–∞–Ω–∞–ª ${channelUsername} –≤–∂–µ –¥–æ–¥–∞–Ω–∏–π.`);
    }

    await sendUserChannels(chatId);
}

// Function to handle pre-checkout query
async function handlePreCheckoutQuery(ctx) {
    try {
        await bot.answerPreCheckoutQuery(ctx.id, true);
    } catch (error) {
        console.error("answerPreCheckoutQuery failed");
    }
}

// Function to handle successful payment
async function handleSuccessfulPayment(ctx) {
    if (!ctx?.successful_payment || !ctx?.from || !ctx?.chat) {
        return;
    }

    try {
        const user = await User.findOne({ chatId: ctx.chat.id });

        if (!user) {
            throw new Error("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        const [_availableTimestamp, availableRequests] = user.availableRequests;

        user.availableRequests = [Date.now(), availableRequests + ctx.successful_payment.total_amount];
        user.payments.push(ctx);

        await user.save();

        bot.sendMessage(ctx.chat.id, "–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–≤–Ω–µ–Ω–æ. –î—è–∫—É—î–º–æ –∑–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É!");
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –æ–ø–ª–∞—á–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
    } finally {
        await sendUserChannels(ctx.chat.id);
    }
}

// Function to send processed news to users
async function sendProcessedNews(chatId, channelUsername) {
    const user = await User.findOne({ chatId });
    if (!user) {
        handleError(chatId, '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        return;
    }

    const [timestamp, requestCounter] = user.requestCounter;
    const [_availableTimestamp, availableRequests] = user.availableRequests;

    if (requestCounter >= availableRequests) {
        await bot.sendInvoice(chatId, '–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É', 
            `–ü–æ–ø–æ–≤–Ω—ñ—Ç—å –±–∞–ª–∞–Ω—Å ‚≠êÔ∏è –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è. –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ 50 –∑–∞–ø–∏—Ç—ñ–≤`, 
            'pay', '', 'XTR', [{ label: '–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É', amount: 50 }]);
        return;
    }

    if (Date.now() - timestamp < 10000) {
        bot.sendMessage(chatId, `–ó–∞—á–µ–∫–∞–π—Ç–µ ${10 - Math.floor((Date.now() - timestamp) / 1000)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º.`);
        return;
    }

    const posts = await scrapeChannel(channelUsername);
    if (posts.length === 0) {
        console.log('No new posts today.');
        return;
    }

    const summary = await processNews(posts, { isCompact: user.isCompact });
    user.requestCounter = [Date.now(), requestCounter + 1];
    await user.save();

    bot.sendMessage(chatId, summary, { parse_mode: 'HTML' });
}

// Function to send the list of channels to the user
async function sendUserChannels(chatId) {
    try {
        const user = await User.findOne({ chatId });
        if (!user) {
            bot.sendMessage(chatId, '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
            return;
        }

        const channelButtons = user.channels.map(channel => ([
            { text: `üëâ ${channel}`, callback_data: `/scrape ${channel}` }
        ]));

        channelButtons.push([{ text: `${user.isCompact ? '‚úÖ' : '‚òëÔ∏è'} –ö–æ—Ä–æ—Ç–∫–æ`, callback_data: '/compact' }]);
        channelButtons.push([
            { text: '+ –î–æ–¥–∞—Ç–∏', callback_data: '/addchannel' },
            { text: '‚ùå –í–∏–¥–∞–ª–∏—Ç–∏', callback_data: '/deletechannel' },
        ]);

        const options = {
            parse_mode: 'HTML',
            reply_markup: { inline_keyboard: channelButtons }
        };

        const [_timestamp, requestCounter] = user.requestCounter;
        const [_availableTimestamp, availableRequests] = user.availableRequests;

        bot.sendMessage(chatId, `<b>‚≠êÔ∏è ${availableRequests - requestCounter}</b> | –í–∞—à—ñ –∫–∞–Ω–∞–ª–∏:`, options);
    } catch (error) {
        handleError(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª—ñ–≤:', error);
    }
}

bot.onText(/\/start/, handleStartCommand);
bot.on('message', handleForwardedMessage);
bot.on("pre_checkout_query", handlePreCheckoutQuery);
bot.on("successful_payment", handleSuccessfulPayment);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async (callbackQuery) => {
    const { message: { chat: { id: chatId } }, data: command } = callbackQuery;

    const handlers = {
        '/scrape': async (channelUsername) => {
            bot.sendMessage(chatId, '–û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏–Ω...');

            await sendProcessedNews(chatId, channelUsername);
            await sendUserChannels(chatId);
        },
        '/deletechannel': async () => {
            const user = await User.findOne({ chatId });

            if (!user || user.channels.length === 0) {
                bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤.');
                return;
            }

            const deleteButtons = user.channels.map(channel => ([
                { text: channel, callback_data: `/confirmdelete ${channel}` }
            ]));

            bot.sendMessage(chatId, '–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:', {
                reply_markup: { inline_keyboard: deleteButtons }
            });
        },
        '/confirmdelete': async (channelUsername) => {
            const user = await User.findOne({ chatId });

            if (!user) return;

            user.channels = user.channels.filter(channel => channel !== channelUsername);
            await user.save();

            bot.sendMessage(chatId, `–ö–∞–Ω–∞–ª ${channelUsername} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π.`);
            await sendUserChannels(chatId);
        },
        '/addchannel': () => {
            bot.sendVideo(chatId, 'add_chanel.mp4', {
                caption: 'üëÜ –í—ñ–¥–µ–æ-—ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è\n\nüîÅ –ü–µ—Ä–µ—à–ª—ñ—Ç—å –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏. –ö–∞–Ω–∞–ª –∑\'—è–≤–∏—Ç—å—Å—è —É –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É ‚úÖ',
                reply_markup: {
                    inline_keyboard: [[{ text: 'üè† –ú–µ–Ω—é', callback_data: '/menu' }]]
                }
            });
        },
        '/compact': async () => {
            const user = await User.findOne({ chatId });

            if (!user) return;

            user.isCompact = !user.isCompact;
            await user.save();

            bot.sendMessage(chatId, `–†–µ–∂–∏–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—ñ ${user.isCompact ? '—É–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–≤–∏–º–∫–Ω–µ–Ω–æ'}.`);
            await sendUserChannels(chatId);
        },
        '/menu': () => sendUserChannels(chatId)
    };

    const [action, param] = command.split(' ');

    if (handlers[action]) {
        try {
            await handlers[action](param);
        } catch (error) {
            handleError(chatId, `–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ ${action}:`, error);
        }
    }
});

module.exports = bot;
